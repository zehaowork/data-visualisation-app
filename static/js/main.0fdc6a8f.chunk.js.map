{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","result","setResult","useEffect","query","table","dimensions","res","BCISDATA","find","el","name","filter","console","log","className","data","xField","yField","seriesField","isPercent","point","size","shape","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"k2jBAAe,I,gCCgEAA,MAzDf,WACE,IADa,EAsBeC,mBAAS,IAtBxB,mBAsBNC,EAtBM,KAsBEC,EAtBF,KAwBbC,qBAAU,WACRC,EAAM,cAAc,SACpBA,EAAM,gCACL,IAGHD,qBAAU,cAIP,CAACF,IAGH,IAAMG,EAAS,SAACC,EAAMC,GACpB,IACIC,EADaC,EAAQ,SAAaC,MAAK,SAAAC,GAAE,OAAIA,EAAGC,OAASN,KAC1C,QAAYO,QAAO,SAAAF,GAAE,OAAEA,EAAE,YAAkBJ,KAC9DO,QAAQC,IAAIP,GACZL,EAAUK,IAIb,OACE,sBAAKQ,UAAU,MAAf,UACA,iDACA,qBAAKA,UAAU,cAAf,SACA,cAAC,IAAD,CAAQC,KAAMf,EAAQc,UAAU,KAAME,OAAO,WAAWC,OAAO,QAAQC,YAAY,gBAAiBC,WAAS,EAACC,MAAO,CAAEC,KAAM,EAAGC,MAAO,cAGvI,qBAAKR,UAAU,cAAf,6BC/CWS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0fdc6a8f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport React,{ useEffect,useState } from 'react';\nimport { Column } from '@ant-design/charts';\nimport BCISDATA from './data.json'\n\nfunction App() {\n  const data = [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ];\n  const config = {\n    data,\n    \n    xField: 'value',\n    yField: 'year',\n    point: {\n      size: 5,\n      shape: 'diamond',\n    },\n  };\n  const [result, setResult] = useState([]);\n  \n  useEffect(() => {\n    query(\"sample size\",'Total')\n    query(\"Trading Status by Industry\")\n  }, [])\n\n\n  useEffect(() => {\n   \n   \n  \n  }, [result])\n\n\n   const query  = (table,dimensions)=>{\n     let queryTable = BCISDATA['BCISDATA'].find(el => el.name === table)\n     let res =queryTable['dataset'].filter(el=>el['WorkForce'] === dimensions)\n     console.log(res);\n     setResult(res);\n\n   }\n\n  return (\n    <div className=\"App\">\n    <h1>BCISSurvey Data</h1>\n    <div className=\"visual-area\">\n    <Column data={result} className='bg'  xField=\"Industry\" yField='value' seriesField='TradingStatus'  isPercent point={{ size: 5, shape: 'diamon' }}\n         />\n    </div>\n    <div className=\"filter_area\" >filter area</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}