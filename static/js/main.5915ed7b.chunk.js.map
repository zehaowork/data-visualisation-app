{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","result","setResult","columns","setColumns","queryTable","setQueryTable","Industry","WorkForce","queryParam","setQueryParam","xField","setXField","yField","setYField","seriesField","setSerisField","isPercent","setIsPercent","useEffect","query","renderTable","BCISDATA","map","el","index","onClick","findColumns","className","name","renderColumns","res","key","push","tmpKey","addQueryParams","console","log","tmpParam","tmpFilterArray","tableElement","forEach","includes","Object","keys","table","find","length","filter","data","xAxis","label","rotate","offset","style","fontSize","isGroup","autoFit","point","size","shape","tmp","swap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5915ed7b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable no-loop-func */\nimport logo from './logo.svg';\nimport './App.css';\n\nimport React,{ useEffect,useState } from 'react';\nimport { Column } from '@ant-design/charts';\nimport BCISDATA from './data.json'\n\nfunction App() {\n  const data = [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ];\n  const config = {\n    data,\n    \n    xField: 'value',\n    yField: 'year',\n    point: {\n      size: 5,\n      shape: 'diamond',\n    },\n  };\n  const [result, setResult] = useState([]);\n  const [columns, setColumns] = useState({});\n  const [queryTable, setQueryTable] = useState(\"sample size\");\n  const [queryParam, setQueryParam] = useState({Industry:[],WorkForce:[]});\n  const [xField, setXField] = useState(\"Industry\");\n  const [yField, setYField] = useState(\"WorkForce\");\n  const [seriesField, setSerisField] = useState(\"\");\n  const [isPercent, setIsPercent] = useState(false);\n  \n  useEffect(() => {\n    query();\n    \n  }, [])\n\n  const renderTable = BCISDATA['BCISDATA'].map((el,index)=>{\n    return <div onClick={()=>{findColumns(index)}} className=\"table\" >{el.name}</div>\n  })\n\n  const renderColumns = ()=>{\n    let res = []\n    for(var key in columns){\n\n      res.push(<div className='tables'>\n        {key}\n        {\n\ncolumns[key].map(el=>{\n        let tmpKey = key;\n        return<div  onClick={()=>{addQueryParams(tmpKey,el)}} className='table'>{el}</div>\n})\n        }\n      </div>)\n      \n    }\n   return res;\n  }\n\n  const addQueryParams = (key,el)=>{\n    console.log(key)\n      let tmpParam = {...queryParam}\n      let tmpFilterArray = [...tmpParam[key]]\n      tmpFilterArray.push(el);\n      tmpParam[key] = tmpFilterArray;\n      console.log(tmpParam)\n      setQueryParam(tmpParam)\n  }\n\n  useEffect(() => {\n    renderColumns()\n  }, [columns])\n\n  useEffect(() => {\n    query()\n  }, [queryParam])\n\n  const findColumns =(index)=>{ \n    setQueryTable(BCISDATA['BCISDATA'][index]['name'])\n    let tableElement = BCISDATA['BCISDATA'][index]['dataset'][0]\n    let columns = {}\n    let queryParam = {};\n    if(tableElement['value'] <1){\n      setIsPercent(true);\n    }else{\n      setIsPercent(false);\n    }\n    for(var key  in tableElement){\n        if (key !== 'value'){\n          columns[key] = []\n        }\n\n    }\n    \n    BCISDATA['BCISDATA'][index]['dataset'].forEach(el =>{\n      for (var key in el){\n        if (key !=='value' && !columns[key].includes(el[key])){\n            columns[key].push(el[key])\n            queryParam[key] = []\n        }\n      }\n    })\n   setColumns(columns);\n    setXField(Object.keys(columns)[1])\n    setYField(\"value\")\n    setSerisField(Object.keys(columns)[0])\n   setQueryParam(queryParam)\n  }\n\n \n\n   const query  = ()=>{\n     \n     let table = BCISDATA['BCISDATA'].find(el => el.name === queryTable)['dataset']\n     \n     \n     for(var key in queryParam){\n       if(queryParam[key].length ===0){\n         continue;\n       }\n        table = table.filter(el=> queryParam[key].includes(el[key]))\n     }\n   \n     setResult(table);\n     \n   }\n\nconst swap =()=>{\n  let tmp = xField\n  setXField(seriesField);\n  setSerisField(tmp);\n}\n\n  return (\n    <div className=\"App\">\n    <h1>BCISSurvey Data</h1>\n    <div className=\"visual-area\">\n    <Column data={result} className='bg'  xAxis={{label:{rotate:100,offset:40,style:{fontSize:7}}}}  isGroup autoFit  xField={xField} yField={yField} seriesField={seriesField}  isPercent={isPercent} point={{ size: 5, shape: 'diamon' }}\n         />\n    </div>\n    <div className=\"filter_area\" ><div  className=\"tables\">\n      Tables\n      {renderTable}\n      </div>\n     {renderColumns()}\n     <div onClick={()=>{swap()}} className='swap-axis'>\n        Swap Axis\n      </div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}